{"version":3,"file":"PasswordView.8bbe5dd2.js","sources":["../../src/utils/random-utils.ts","../../src/store/password.ts","../../src/views/PasswordView.vue"],"sourcesContent":["// 数字\r\nconst NUMBERS = '0123456789'\r\n// 小写字母\r\nconst LOWER_CASE = 'abcdefghijklmnopqrstuvwxyz'\r\n// 大写字母\r\nconst UPPER_CASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n// 符号\r\nconst SPECIALS = '~!@#$%^*()_+-=[]{}|;:,./<>?'\r\n\r\n/**\r\n * 随机生成字符串\r\n * @param length\r\n * @param options\r\n */\r\nconst randomUtils = (length: number, options: any) => {\r\n  length || (length = 8) // 长度：默认值 8\r\n  options || (options = {})\r\n\r\n  let chars = ''\r\n  let result = ''\r\n\r\n  if (options === true) {\r\n    chars = NUMBERS + LOWER_CASE + UPPER_CASE + SPECIALS\r\n  } else if (typeof options === 'string') {\r\n    chars = options\r\n  } else {\r\n    if (options.numbers !== false && options.numbers !== '') {\r\n      const tmp = (typeof options.numbers === 'string') ? options.numbers : NUMBERS\r\n      chars += tmp\r\n\r\n      length--\r\n      result += tmp[Math.floor(Math.random() * tmp.length)] // 包含数字时，最少有一个\r\n    }\r\n\r\n    if (options.lowerCase !== false && options.lowerCase !== '') {\r\n      const tmp = (typeof options.lowerCase === 'string') ? options.lowerCase : LOWER_CASE\r\n      chars += tmp\r\n\r\n      length--\r\n      result += tmp[Math.floor(Math.random() * tmp.length)] // 包含小写字母时，最少有一个\r\n    }\r\n\r\n    if (options.upperCase !== false && options.upperCase !== '') {\r\n      const tmp = (typeof options.upperCase === 'string') ? options.upperCase : UPPER_CASE\r\n      chars += tmp\r\n\r\n      length--\r\n      result += tmp[Math.floor(Math.random() * tmp.length)] // 包含大写字母时，最少有一个\r\n    }\r\n\r\n    if (options.specials && options.specials !== '') {\r\n      const tmp = (typeof options.specials === 'string') ? options.specials : SPECIALS\r\n      chars += tmp\r\n\r\n      length--\r\n      result += tmp[Math.floor(Math.random() * tmp.length)] // 包含符号时，最少有一个\r\n    }\r\n  }\r\n\r\n  // 条件中不包含字符串集合\r\n  if (chars === '') {\r\n    // 返回空\r\n    return ''\r\n  }\r\n\r\n  while (length > 0) {\r\n    length--\r\n    result += chars[Math.floor(Math.random() * chars.length)]\r\n  }\r\n\r\n  return result.split('').sort(function () {\r\n    return Math.random() - 0.5\r\n  }).join('')\r\n}\r\n\r\nexport default randomUtils\r\n\r\nexport {\r\n  NUMBERS,\r\n  LOWER_CASE,\r\n  UPPER_CASE,\r\n  SPECIALS\r\n}\r\n","import { createPinia, defineStore } from 'pinia'\r\nimport { ref } from 'vue'\r\nimport { NUMBERS, LOWER_CASE, UPPER_CASE, SPECIALS } from '../utils/random-utils'\r\n\r\nconst passwordDefineStore = defineStore('password', {\r\n  state: () => ({\r\n    numbers: ref<string>(NUMBERS), // 数字\r\n    includeNumbers: ref<boolean>(true), // 是否包含数字\r\n\r\n    specials: ref<string>(SPECIALS), // 符号\r\n    includeSpecials: ref<boolean>(true), // 是否包含符号\r\n\r\n    lowerCase: ref<string>(LOWER_CASE), // 小写字母\r\n    includeLowerCase: ref<boolean>(true), // 是否包含小写字母\r\n\r\n    upperCase: ref<string>(UPPER_CASE), // 大写字母\r\n    includeUpperCase: ref<boolean>(true), // 是否包含大写字母\r\n\r\n    passwordLength: ref<number>(10), // 长度\r\n    num: ref<number>(5) // 数量\r\n  }),\r\n  getters: {\r\n    /**\r\n     * 数字\r\n     * @param state\r\n     */\r\n    getNumbers (state) {\r\n      return (state.numbers === '' || state.numbers === undefined) ? NUMBERS : state.numbers\r\n    },\r\n\r\n    /**\r\n     * 符号\r\n     * @param state\r\n     */\r\n    getSpecials (state) {\r\n      return (state.specials === '' || state.specials === undefined) ? SPECIALS : state.specials\r\n    },\r\n\r\n    /**\r\n    * 小写字母\r\n    * @param state\r\n    */\r\n    getLowerCase (state) {\r\n      return (state.lowerCase === '' || state.lowerCase === undefined) ? LOWER_CASE : state.lowerCase\r\n    },\r\n\r\n    /**\r\n     * 大写字母\r\n     * @param state\r\n     */\r\n    getUpperCase (state) {\r\n      return (state.upperCase === '' || state.upperCase === undefined) ? UPPER_CASE : state.upperCase\r\n    },\r\n\r\n    /**\r\n     * 长度\r\n     * @param state\r\n     */\r\n    getPasswordLength (state) {\r\n      return state.passwordLength\r\n    },\r\n    /**\r\n     * 数量\r\n     * @param state\r\n     */\r\n    getNum (state) {\r\n      return state.num\r\n    }\r\n  },\r\n  actions: {\r\n    /**\r\n     * 数字\r\n     * @param numbers\r\n     */\r\n    setNumbers (numbers: string) {\r\n      this.numbers = numbers\r\n    },\r\n    /**\r\n     * 是否包含数字\r\n     * @param includeNumbers\r\n     */\r\n    setIncludeNumbers (includeNumbers: boolean) {\r\n      this.includeNumbers = includeNumbers\r\n    },\r\n\r\n    /**\r\n     * 符号\r\n     * @param specials\r\n     */\r\n    setSpecials (specials: string) {\r\n      this.specials = specials\r\n    },\r\n    /**\r\n     * 是否包含符号\r\n     * @param includeSpecials\r\n     */\r\n    setIncludeSpecials (includeSpecials: boolean) {\r\n      this.includeSpecials = includeSpecials\r\n    },\r\n\r\n    /**\r\n     * 小写字母\r\n     * @param lowerCase\r\n     */\r\n    setLowerCase (lowerCase: string) {\r\n      this.lowerCase = lowerCase\r\n    },\r\n    /**\r\n     * 是否包含小写字母\r\n     * @param includeLowerCase\r\n     */\r\n    setIncludeLowerCase (includeLowerCase: boolean) {\r\n      this.includeLowerCase = includeLowerCase\r\n    },\r\n\r\n    /**\r\n     * 大写字母\r\n     * @param upperCase\r\n     */\r\n    setUpperCase (upperCase: string) {\r\n      this.upperCase = upperCase\r\n    },\r\n    /**\r\n     * 是否包含大写字母\r\n     * @param includeUpperCase\r\n     */\r\n    setIncludeUpperCase (includeUpperCase: boolean) {\r\n      this.includeUpperCase = includeUpperCase\r\n    },\r\n\r\n    /**\r\n     * 长度\r\n     * @param passwordLength\r\n     */\r\n    setPasswordLength (passwordLength: number) {\r\n      this.passwordLength = passwordLength\r\n    },\r\n    /**\r\n     * 数量\r\n     * @param num\r\n     */\r\n    setNum (num: number) {\r\n      this.num = num\r\n    }\r\n\r\n  }\r\n})\r\n\r\nconst passwordStore = passwordDefineStore(createPinia())\r\n\r\n// 订阅缓存的修改\r\npasswordStore.$subscribe((mutation, state) => {\r\n  // 将缓存的修改放入本地缓存中\r\n  localStorage.setItem(passwordStore.$id, JSON.stringify({ ...state }))\r\n})\r\n\r\n// 获取历史缓存\r\nconst passwordStoreOld = localStorage.getItem(passwordStore.$id)\r\nif (passwordStoreOld) {\r\n  // 返回已存在的缓存\r\n  passwordStore.$state = JSON.parse(passwordStoreOld)\r\n}\r\n\r\n// 注意，在使用时，不用构造方法，直接调用即可\r\nexport default passwordStore\r\n","<template>\r\n  <el-row justify=\"space-evenly\">\r\n    <el-col :span=\"22\" class=\"text-center\">\r\n      <h1>Password</h1>\r\n    </el-col>\r\n  </el-row>\r\n\r\n  <br>\r\n\r\n  <el-row justify=\"center\" :gutter=\"20\">\r\n    <el-col :span=\"11\">\r\n      <el-input v-model=\"numbers\" placeholder=\"请输入数字\">\r\n        <template #prepend>\r\n          <span>数字</span>\r\n        </template>\r\n        <template #append>\r\n          <el-switch v-model=\"includeNumbers\" active-text=\"包含\" inactive-text=\"不包含\"/>\r\n        </template>\r\n      </el-input>\r\n    </el-col>\r\n    <el-col :span=\"11\">\r\n      <el-input v-model=\"specials\" placeholder=\"请输入符号\">\r\n        <template #prepend>\r\n          <span>符号</span>\r\n        </template>\r\n        <template #append>\r\n          <el-switch v-model=\"includeSpecials\" active-text=\"包含\" inactive-text=\"不包含\"/>\r\n        </template>\r\n      </el-input>\r\n    </el-col>\r\n  </el-row>\r\n\r\n  <br>\r\n\r\n  <el-row justify=\"center\" :gutter=\"20\">\r\n    <el-col :span=\"11\">\r\n      <el-input v-model=\"lowerCase\" placeholder=\"请输入小写字母\">\r\n        <template #prepend>\r\n          <span>小写字母</span>\r\n        </template>\r\n        <template #append>\r\n          <el-switch v-model=\"includeLowerCase\" active-text=\"包含\" inactive-text=\"不包含\"/>\r\n        </template>\r\n      </el-input>\r\n    </el-col>\r\n    <el-col :span=\"11\">\r\n      <el-input v-model=\"upperCase\" placeholder=\"请输入大写字母\">\r\n        <template #prepend>\r\n          <span>大写字母</span>\r\n        </template>\r\n        <template #append>\r\n          <el-switch v-model=\"includeUpperCase\" active-text=\"包含\" inactive-text=\"不包含\"/>\r\n        </template>\r\n      </el-input>\r\n    </el-col>\r\n  </el-row>\r\n\r\n  <br>\r\n\r\n  <el-row justify=\"center\" :gutter=\"20\">\r\n    <el-col :span=\"11\">\r\n      <el-input v-model=\"passwordLength\" type=\"number\" clearable placeholder=\"请输入生成的长度\">\r\n        <template #prepend>\r\n          <span>长度</span>\r\n        </template>\r\n      </el-input>\r\n    </el-col>\r\n    <el-col :span=\"11\">\r\n      <el-input v-model=\"num\" type=\"number\" placeholder=\"请输入生成的个数\">\r\n        <template #prepend>\r\n          <span>生成个数</span>\r\n        </template>\r\n        <template #append>\r\n          <el-button @click=\"generate\">生成</el-button>\r\n        </template>\r\n      </el-input>\r\n    </el-col>\r\n  </el-row>\r\n\r\n  <br>\r\n\r\n  <el-row class=\"text-center\">\r\n    <el-col :span=\"22\" v-for=\"data in dataList\" :key=\"data\">\r\n      <div class=\"uuid\" @dblclick=\"dblclickDiv\" data-dblclick=\"已复制到剪贴板\">{{ data }}</div>\r\n    </el-col>\r\n  </el-row>\r\n\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, watch } from 'vue'\r\nimport { ElMessage, ElMessageBox } from 'element-plus/es'\r\n\r\nimport randomUtils from '../utils/random-utils'\r\nimport { dblclickDiv } from '../utils/clipboard'\r\nimport passwordStore from '../store/password'\r\n\r\n// 是否忽略警告\r\nconst warning = ref<boolean>(false)\r\n\r\n// 数字\r\nconst numbers = ref<string>(passwordStore.getNumbers)\r\nwatch(() => numbers.value, (newValue, oldValue) => {\r\n  passwordStore.setNumbers(newValue)\r\n})\r\n\r\n// 是否包含数字\r\nconst includeNumbers = ref<boolean>(passwordStore.includeNumbers)\r\nwatch(() => includeNumbers.value, (newValue, oldValue) => {\r\n  passwordStore.setIncludeNumbers(newValue)\r\n})\r\n\r\n// 符号\r\nconst specials = ref(passwordStore.specials)\r\nwatch(() => specials.value, (newValue, oldValue) => {\r\n  passwordStore.setSpecials(newValue)\r\n})\r\n\r\n// 是否包含符号\r\nconst includeSpecials = ref<boolean>(passwordStore.includeSpecials)\r\nwatch(() => includeSpecials.value, (newValue, oldValue) => {\r\n  passwordStore.setIncludeSpecials(newValue)\r\n})\r\n\r\n// 小写字母\r\nconst lowerCase = ref(passwordStore.getLowerCase)\r\nwatch(() => lowerCase.value, (newValue, oldValue) => {\r\n  passwordStore.setLowerCase(newValue)\r\n})\r\n\r\n// 是否包含小写字母\r\nconst includeLowerCase = ref<boolean>(passwordStore.includeLowerCase)\r\nwatch(() => includeLowerCase.value, (newValue, oldValue) => {\r\n  passwordStore.setIncludeLowerCase(newValue)\r\n})\r\n\r\n// 大写字母\r\nconst upperCase = ref(passwordStore.getUpperCase)\r\nwatch(() => upperCase.value, (newValue, oldValue) => {\r\n  passwordStore.setUpperCase(newValue)\r\n})\r\n\r\n// 是否包含大写字母\r\nconst includeUpperCase = ref<boolean>(passwordStore.includeUpperCase)\r\nwatch(() => includeUpperCase.value, (newValue, oldValue) => {\r\n  passwordStore.setIncludeUpperCase(newValue)\r\n})\r\n\r\n// 长度\r\nconst passwordLength = ref<number>(passwordStore.getPasswordLength)\r\nwatch(() => passwordLength.value, (newValue, oldValue) => {\r\n  passwordStore.setPasswordLength(newValue)\r\n})\r\n\r\n// 数量\r\nconst num = ref<number>(passwordStore.getNum)\r\nwatch(() => num.value, (newValue, oldValue) => {\r\n  passwordStore.setNum(newValue)\r\n})\r\n\r\n// 数据\r\nconst dataList = ref<string[]>([])\r\n\r\n// 生成密码\r\nconst generate = () => {\r\n  // @ts-ignore\r\n  if (num.value === '' || isNaN(Number(num.value))) {\r\n    ElMessage({ message: '生成数量不能为空', type: 'warning' })\r\n    return\r\n  }\r\n\r\n  if (warning.value) {\r\n    exec()\r\n  } else {\r\n    const tmp = 10000\r\n    if (num.value > tmp) {\r\n      ElMessageBox.confirm(`纯 JavaScript 运算，生成数量超过 ${tmp}，可能会导致浏览器卡死，是否继续？`, '警告', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        warning.value = true\r\n        exec()\r\n      }).catch(() => {\r\n\r\n      })\r\n    } else {\r\n      exec()\r\n    }\r\n  }\r\n}\r\n\r\nconst exec = () => {\r\n// 清空数据\r\n  dataList.value = []\r\n\r\n  // 循环添加\r\n  for (let i = 0; i < (num.value === undefined ? 5 : num.value); i++) {\r\n    const tmp = randomUtils(passwordLength.value, {\r\n      numbers: includeNumbers.value ? numbers.value : false,\r\n      specials: includeSpecials.value ? specials.value : false,\r\n      lowerCase: includeLowerCase.value ? lowerCase.value : false,\r\n      upperCase: includeUpperCase.value ? upperCase.value : false\r\n    })\r\n\r\n    if (tmp === '') {\r\n      ElMessage({ message: '随机字符串、长度不合法', type: 'warning' })\r\n      break\r\n    } else if (tmp.length !== Number(passwordLength.value)) {\r\n      ElMessage({ message: '随机字符串、长度不合法', type: 'warning' })\r\n      break\r\n    }\r\n\r\n    dataList.value.push(tmp)\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"names":["NUMBERS","LOWER_CASE","UPPER_CASE","SPECIALS","randomUtils","length","options","chars","result","tmp","passwordDefineStore","defineStore","ref","state","numbers","includeNumbers","specials","includeSpecials","lowerCase","includeLowerCase","upperCase","includeUpperCase","passwordLength","num","passwordStore","createPinia","mutation","passwordStoreOld","warning","watch","newValue","oldValue","dataList","generate","ElMessage","exec","ElMessageBox","i"],"mappings":"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"}